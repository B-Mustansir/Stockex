import { BigNumber } from "bignumber.js";
export declare const signerType: {
    readonly connect: "connect";
    readonly switchChain: "switchChain";
    readonly signTransaction: "signTransaction";
    readonly sendTransaction: "sendTransaction";
    readonly signMessage: "signMessage";
};
export declare type SignerType = typeof signerType[keyof typeof signerType];
export declare type AccountExtraKey = "publicKey";
export declare type AccountExtraKeys = AccountExtraKey[];
export declare type ConnectToAccountRequest = {
    extraKeys: AccountExtraKeys;
    overwrite?: boolean;
};
export declare type IntmaxWalletAccount = {
    address: string;
    chainId: number;
    publicKey?: string;
};
export declare type Signature = string;
export declare type SwitchChainParams = {
    chainId: number;
};
export declare type IntmaxWalletMessageParams = {
    message: Signature;
};
export declare type IntmaxWalletInteractParams = {
    type: SignerType;
    data?: TransactionRequest | IntmaxWalletMessageParams | SwitchChainParams | ConnectToAccountRequest;
    txWait?: boolean;
    redirectUrl?: string;
};
export declare type IntmaxWalletEventResponse = {
    message: TransactionReceipt | string;
    result: boolean;
};
export declare const windowStatus: {
    readonly open: "open";
    readonly closed: "closed";
};
export declare type WindowStatusType = typeof windowStatus[keyof typeof windowStatus];
export declare type ChildWindow = {
    window: Window | null;
    status: WindowStatusType;
};
export declare type Bytes = ArrayLike<number>;
export declare type BytesLike = Bytes | string;
export declare type BigNumberish = BigNumber | Bytes | bigint | string | number;
export declare type AccessList = Array<{
    address: string;
    storageKeys: Array<string>;
}>;
export declare type AccessListish = AccessList | Array<[string, Array<string>]> | Record<string, Array<string>>;
export declare type TransactionReceipt = {
    accessList?: AccessListish;
    chainId?: number;
    confirmations: number;
    data?: BytesLike;
    from?: string;
    gasLimit?: BigNumberish;
    gasPrice?: BigNumberish;
    hash?: string;
    maxFeePerGas?: BigNumberish;
    maxPriorityFeePerGas?: BigNumberish;
    nonce?: BigNumberish;
    to?: string;
    type?: number;
};
export declare type TransactionRequest = {
    to?: string;
    from?: string;
    nonce?: BigNumberish;
    gasLimit?: BigNumberish;
    gasPrice?: BigNumberish;
    data?: BytesLike;
    value?: BigNumberish;
    chainId?: number;
    type?: number;
    accessList?: AccessListish;
    maxPriorityFeePerGas?: BigNumberish;
    maxFeePerGas?: BigNumberish;
    customData?: Record<string, any>;
    ccipReadEnabled?: boolean;
};
export declare type ExtractSignResponse<T extends string | undefined> = T extends string ? void : string;
export declare type ExtractTxResponse<T extends string | undefined> = T extends string ? void : TransactionReceipt;
export declare type NoRedirect = undefined;
export declare type Redirect = string;
