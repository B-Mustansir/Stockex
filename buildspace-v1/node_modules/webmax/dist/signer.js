"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntmaxWalletSigner = exports.webmaxConfig = void 0;
const interface_1 = require("./interface");
const INTMAX_WALLET_WINDOW_NAME = "intmaxWallet";
const CHILD_WINDOW_WATCH_INTERVAL = 100;
const INTMAX_WALLET_WINDOW_HEIGHT = 600;
const INTMAX_WALLET_WINDOW_WIDTH = 400;
exports.webmaxConfig = {
    intmaxWalletUrl: "https://www.intmaxwallet.io",
};
class IntmaxWalletSigner {
    constructor(account) {
        this._account = account;
    }
    async connectToAccount(request) {
        var _a;
        if (this._account && !(request === null || request === void 0 ? void 0 : request.overwrite)) {
            return this._account;
        }
        const params = {
            type: interface_1.signerType.connect,
            data: {
                extraKeys: (_a = request === null || request === void 0 ? void 0 : request.extraKeys) !== null && _a !== void 0 ? _a : [],
            },
        };
        this._account = await this.interactIntmaxWallet(params, "IntmaxWallet Connect: User Rejected.");
        return this._account;
    }
    isConnected() {
        return !!this._account;
    }
    async getAddress() {
        const account = await this.connectToAccount();
        return account.address;
    }
    async getChainId() {
        const account = await this.connectToAccount();
        return account.chainId;
    }
    async getPublicKey() {
        var _a;
        const account = await this.connectToAccount();
        return (_a = account.publicKey) !== null && _a !== void 0 ? _a : null;
    }
    async signTransaction(transaction, redirectUrl) {
        const params = {
            type: interface_1.signerType.signTransaction,
            data: transaction,
            redirectUrl,
        };
        if (params.redirectUrl) {
            this.redirectToIntmaxWallet(params);
            return undefined;
        }
        const serializedSignature = await this.interactIntmaxWallet(params, "IntmaxWallet Tx Signature: User denied transaction signature.");
        return serializedSignature;
    }
    async sendTransaction(transaction, txWait = true, redirectUrl) {
        const params = {
            type: interface_1.signerType.sendTransaction,
            data: transaction,
            txWait,
            redirectUrl,
        };
        if (params.redirectUrl) {
            this.redirectToIntmaxWallet(params);
            return undefined;
        }
        const receipt = await this.interactIntmaxWallet(params, "IntmaxWallet Tx Send: User denied send transaction.");
        return receipt;
    }
    async signMessage(message, redirectUrl) {
        const params = {
            type: interface_1.signerType.signMessage,
            data: {
                message,
            },
            redirectUrl,
        };
        if (params.redirectUrl) {
            this.redirectToIntmaxWallet(params);
            return undefined;
        }
        const signature = await this.interactIntmaxWallet(params, "IntmaxWallet Message Signature: User denied message signature.");
        return signature;
    }
    async switchChain(chainId) {
        if (!this.isConnected()) {
            await this.connectToAccount();
        }
        const params = {
            type: interface_1.signerType.switchChain,
            data: {
                chainId,
            },
        };
        this._account = await this.interactIntmaxWallet(params, "IntmaxWallet SwitchChain: User Rejected.");
        return this._account;
    }
    redirectToIntmaxWallet(params) {
        window.location.href = this.generateIntmaxWalletSignUrl(params);
    }
    async interactIntmaxWallet(params, errorMsg) {
        const result = await this.eventPromiseListener(params, errorMsg)
            .then((value) => value)
            .catch((error) => {
            throw new Error(error);
        });
        return result;
    }
    watchWindow(cWindow, errorMsg, reject) {
        const timer = setInterval(checkChild, CHILD_WINDOW_WATCH_INTERVAL);
        function checkChild() {
            var _a;
            if (((_a = cWindow.window) === null || _a === void 0 ? void 0 : _a.closed) && cWindow.status === interface_1.windowStatus.open) {
                clearInterval(timer);
                reject(errorMsg);
            }
        }
        return timer;
    }
    clearWatch(timer, cWindow) {
        cWindow.status = interface_1.windowStatus.closed;
        clearInterval(timer);
    }
    openIntmaxWallet(url) {
        const top = window.screenY;
        const left = window.screenX + window.innerWidth - INTMAX_WALLET_WINDOW_WIDTH;
        const win = window.open(url, INTMAX_WALLET_WINDOW_NAME, `top=${top}px, left=${left}px, height=${INTMAX_WALLET_WINDOW_HEIGHT}px, width=${INTMAX_WALLET_WINDOW_WIDTH}px`);
        return {
            window: win,
            status: interface_1.windowStatus.open,
        };
    }
    closeIntmaxWallet(cWindow) {
        if (!cWindow.window) {
            return;
        }
        return cWindow.window.close();
    }
    generateIntmaxWalletSignUrl(params) {
        return (`${exports.webmaxConfig.intmaxWalletUrl}/signer?params=` + encodeURIComponent(JSON.stringify(params)));
    }
    eventPromiseListener(params, errorMsg) {
        return new Promise((resolve, reject) => {
            const url = this.generateIntmaxWalletSignUrl(params);
            const cWindow = this.openIntmaxWallet(url);
            const timer = this.watchWindow(cWindow, errorMsg, reject);
            const listener = (event) => {
                if (event.origin === exports.webmaxConfig.intmaxWalletUrl) {
                    window.removeEventListener("message", listener);
                    this.clearWatch(timer, cWindow);
                    this.closeIntmaxWallet(cWindow);
                    const data = event.data;
                    if (!data.result) {
                        return reject(data.message);
                    }
                    resolve(event.data.message);
                }
            };
            window.addEventListener("message", listener, false);
        });
    }
}
exports.IntmaxWalletSigner = IntmaxWalletSigner;
